package com.global.meter.v3.common.enums;

import java.util.AbstractMap.SimpleEntry;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import com.global.meter.v3.utils.AppPropertyConstants;

public enum AppPropertyDataSet {
	SERVER_CONTEXTPATH(AppPropertyConstants.AppPropertyName.SERVER_CONTEXTPATH),
	SERVER_PORT(AppPropertyConstants.AppPropertyName.SERVER_PORT),
	CASSANDRA_KEYSPACE_NAME(AppPropertyConstants.AppPropertyName.CASSANDRA_KEYSPACE_NAME),
	CASSANDRA_CONTACT_POINTS(AppPropertyConstants.AppPropertyName.CASSANDRA_CONTACT_POINTS),
	CASSANDRA_PORT(AppPropertyConstants.AppPropertyName.CASSANDRA_PORT),
	CASSANDRA_USER(AppPropertyConstants.AppPropertyName.CASSANDRA_USER),
	CASSANDRA_PASSWORD(AppPropertyConstants.AppPropertyName.CASSANDRA_PASSWORD),
	CASSANDRA_PROTOCOL_VERSION(AppPropertyConstants.AppPropertyName.CASSANDRA_PROTOCOL_VERSION),
	PRESTO_NAME(AppPropertyConstants.AppPropertyName.PRESTO_NAME),
	PRESTO_DRIVER_CLASS_NAME(AppPropertyConstants.AppPropertyName.PRESTO_DRIVER_CLASS_NAME),
	PRESTO_URL(AppPropertyConstants.AppPropertyName.PRESTO_URL),
	PRESTO_USERNAME(AppPropertyConstants.AppPropertyName.PRESTO_USERNAME),
	PRESTO_TEST_WHILE_IDLE(AppPropertyConstants.AppPropertyName.PRESTO_TEST_WHILE_IDLE),
	PRESTO_VALIDATION_QUERY(AppPropertyConstants.AppPropertyName.PRESTO_VALIDATION_QUERY),
	METER_COMM_COUNT_CRON(AppPropertyConstants.AppPropertyName.METER_COMM_COUNT_CRON),
	METER_RETRY(AppPropertyConstants.AppPropertyName.METER_RETRY),
	FIRMWARE_UPGRADE_RETRY(AppPropertyConstants.AppPropertyName.FIRMWARE_UPDATE_RETRY),
	CONFIG_RETRY(AppPropertyConstants.AppPropertyName.CONFIG_RETRY),
	LAST_LP_READ(AppPropertyConstants.AppPropertyName.LAST_LP_READ),
	DLMS_APP_ADDRESS(AppPropertyConstants.AppPropertyName.DLMS_APP_ADDRESS),
	FULLDATA_READ(AppPropertyConstants.AppPropertyName.FULLDATA_READ),
	FULL_PREPAY_READ(AppPropertyConstants.AppPropertyName.FULL_PREPAY_READ),
	FIRMWARE_UPGRADE(AppPropertyConstants.AppPropertyName.FIRMWARE_RETRY),
	FULLDATA_CONFIG_WRITE(AppPropertyConstants.AppPropertyName.FULLDATA_CONFIG_WRITE),
	INSTANTANEOUS_READ(AppPropertyConstants.AppPropertyName.INSTANTANEOUS_READ),
	DAILY_LP_READ(AppPropertyConstants.AppPropertyName.DAILY_LP_READ),
	DELTA_LP_READ(AppPropertyConstants.AppPropertyName.DELTA_LP_READ),
	BILLING_DATA_READ(AppPropertyConstants.AppPropertyName.BILLING_DATA_READ),
	POWER_REALATED_EVENTS_READ(AppPropertyConstants.AppPropertyName.POWER_REALATED_EVENTS_READ),
	VOLTAGE_REALATED_EVENTS_READ(AppPropertyConstants.AppPropertyName.VOLTAGE_REALATED_EVENTS_READ),
	TRANSACTION_RELATED_EVENTS_READ(AppPropertyConstants.AppPropertyName.TRANSACTION_RELATED_EVENTS_READ),
	CURRENT_RELATED_EVENTS_READ(AppPropertyConstants.AppPropertyName.CURRENT_RELATED_EVENTS_READ),
	OTHER_RELATED_EVENTS_READ(AppPropertyConstants.AppPropertyName.OTHER_RELATED_EVENTS_READ),
	NON_ROLL_OVER_RELATED_EVENTS_READ(AppPropertyConstants.AppPropertyName.NON_ROLL_OVER_RELATED_EVENTS_READ),
	CONTROL_RELATED_EVENTS_READ(AppPropertyConstants.AppPropertyName.CONTROL_RELATED_EVENTS_READ),
	NAME_PLATE_READ(AppPropertyConstants.AppPropertyName.NAME_PLATE_READ),
	CONNECT_WRITE(AppPropertyConstants.AppPropertyName.CONNECT_WRITE),
	DISCONNECT_WRITE(AppPropertyConstants.AppPropertyName.DISCONNECT_WRITE),
	CONFIG_ENABLE_PAYMENT_MODE(AppPropertyConstants.AppPropertyName.CONFIG_ENABLE_PAYMENT_MODE),
	CONFIG_ENABLE_METERING_MODE(AppPropertyConstants.AppPropertyName.CONFIG_ENABLE_METERING_MODE),
	CONFIG_LAST_TOKEN_RECHARGE_AMOUNT(AppPropertyConstants.AppPropertyName.CONFIG_LAST_TOKEN_RECHARGE_AMOUNT),
	CONFIG_LAST_TOKEN_RECHARGE_TIME(AppPropertyConstants.AppPropertyName.CONFIG_LAST_TOKEN_RECHARGE_TIME),
	CONFIG_TOTAL_AMOUNT_AT_LAST_RECHARGE(AppPropertyConstants.AppPropertyName.CONFIG_TOTAL_AMOUNT_AT_LAST_RECHARGE),
	CONFIG_CURRENT_BALANCE_AMOUNT(AppPropertyConstants.AppPropertyName.CONFIG_CURRENT_BALANCE_AMOUNT),
	CONFIG_CURRENT_BALANCE_TIME(AppPropertyConstants.AppPropertyName.CONFIG_CURRENT_BALANCE_TIME),
	CONFIG_LOAD_LIMIT_KW(AppPropertyConstants.AppPropertyName.CONFIG_LOAD_LIMIT_KW),
	ENABLE_DISABLE_DIS_CONTROL(AppPropertyConstants.AppPropertyName.ENABLE_DISABLE_DIS_CONTROL),
	CONFIG_RTC_CLOCK(AppPropertyConstants.AppPropertyName.CONFIG_RTC_CLOCK),
	CONFIG_ACTIVITY_CALENDAR(AppPropertyConstants.AppPropertyName.CONFIG_ACTIVITY_CALENDAR),
	CONFIG_DEMAND_INTEGRATION_PERIOD(AppPropertyConstants.AppPropertyName.CONFIG_DEMAND_INTEGRATION_PERIOD),
	CONFIG_PROFILE_CAPTURE_PERIOD(AppPropertyConstants.AppPropertyName.CONFIG_PROFILE_CAPTURE_PERIOD),
	CONFIG_COVER_OPEN(AppPropertyConstants.AppPropertyName.CONFIG_COVER_OPEN),
	CONFIG_MD_RESET(AppPropertyConstants.AppPropertyName.CONFIG_MD_RESET),
	CONFIG_INSTANT_IP_PUSH(AppPropertyConstants.AppPropertyName.CONFIG_INSTANT_IP_PUSH),
	CONFIG_ALERT_IP_PUSH(AppPropertyConstants.AppPropertyName.CONFIG_ALERT_IP_PUSH),
	CONFIG_ACTIVITY_SCHEDULE_PUSH(AppPropertyConstants.AppPropertyName.CONFIG_ACTIVITY_SCHEDULE_PUSH),
	CONFIG_BILLING_DATES(AppPropertyConstants.AppPropertyName.CONFIG_BILLING_DATES),
	EVENT_TYPE_LIST(AppPropertyConstants.AppPropertyName.EVENT_TYPE_LIST),
	EVENT_TYPE_CATEGORY_LIST(AppPropertyConstants.AppPropertyName.EVENT_TYPE_CATEGORY_LIST),
	DIV_FACTOR(AppPropertyConstants.AppPropertyName.DIV_FACTOR),
	APPLICATION_PROPERTY(AppPropertyConstants.AppPropertyName.APPLICATION_PROPERTY),
	PROCESS_BATCH_DEVICE_COMMAND_BACKDAYS(AppPropertyConstants.AppPropertyName.PROCESS_BATCH_DEVICE_COMMAND_BACKDAYS),
	HAPPY_HOUR_START_TIME(AppPropertyConstants.AppPropertyName.HAPPY_HOUR_START_TIME),
	HAPPY_HOUR_END_TIME(AppPropertyConstants.AppPropertyName.HAPPY_HOUR_END_TIME),
	SCHEDULE_PROCESS_DEVICE_CONFIG_BATCH_LOG_CRON(
			AppPropertyConstants.AppPropertyName.SCHEDULE_PROCESS_DEVICE_CONFIG_BATCH_LOG_CRON),
	SCHEDULE_PROCESS_DEVICE_COMMAND_BATCH_LOG_CRON(
			AppPropertyConstants.AppPropertyName.SCHEDULE_PROCESS_DEVICE_COMMAND_BATCH_LOG_CRON),
	SCHEDULE_PROCESS_DEVICE_CONFIG_READ_BATCH_LOG_CRON(
			AppPropertyConstants.AppPropertyName.SCHEDULE_PROCESS_DEVICE_CONFIG_READ_BATCH_LOG_CRON),
	APPLICATION_PROPERTY_UPDATE(AppPropertyConstants.AppPropertyName.APPLICATION_PROPERTY_UPDATE),
	APPLICATION_PROPERTY_READ_UPDATE(AppPropertyConstants.AppPropertyName.APPLICATION_PROPERTY_READ_UPDATE),
	PUSH_EVENTS_LIST(AppPropertyConstants.AppPropertyName.PUSH_EVENTS_LIST),
	GAS_METER_COMMAND_LOG_BACKDAYS(AppPropertyConstants.AppPropertyName.GAS_METER_COMMAND_LOG_BACKDAYS),
	SCHEDULE_PROCESS_NON_DLMS_GAS_METER_COMMAND_LOG_CRON(
			AppPropertyConstants.AppPropertyName.SCHEDULE_PROCESS_NON_DLMS_GAS_METER_COMMAND_LOG_CRON),
	SINGLE_CONNECTION_COMMAND(AppPropertyConstants.AppPropertyName.SINGLE_CONNECTION_COMMAND),
	SINGLE_CONNECTION_DEPENDENT_CONNECT_COMMAND(
			AppPropertyConstants.AppPropertyName.SINGLE_CONNECTION_DEPENDENT_CONNECT_COMMAND),
	SINGLE_CONNECTION_DEPENDENT_DISCONNECT_COMMAND(
			AppPropertyConstants.AppPropertyName.SINGLE_CONNECTION_DEPENDENT_DISCONNECT_COMMAND),
	SCHEDULE_PROCESS_BILLING_DATA_CRON(AppPropertyConstants.AppPropertyName.SCHEDULE_PROCESS_BILLING_DATA_CRON),
	PROCESS_BILLING_DATA_ENABLE(AppPropertyConstants.AppPropertyName.PROCESS_BILLING_DATA_ENABLE),
	PROCESS_SLA_BLOCKLOAD_BACKDAYS(AppPropertyConstants.AppPropertyName.PROCESS_SLA_BLOCKLOAD_BACKDAYS),
	PROCESS_SLA_BLOCKLOAD_RANGETIME(AppPropertyConstants.AppPropertyName.PROCESS_SLA_BLOCKLOAD_RANGETIME),
	PROCESS_SLA_DAILYLOAD_RANGETIME(AppPropertyConstants.AppPropertyName.PROCESS_SLA_DAILYLOAD_RANGETIME),
	SCHEDULE_PROCESS_DAILY_SUMMARY_CRON(AppPropertyConstants.AppPropertyName.SCHEDULE_PROCESS_DAILY_SUMMARY_CRON),
	SCHEDULE_PROCESS_DAILY_SUMMARY_ENABLE(AppPropertyConstants.AppPropertyName.SCHEDULE_PROCESS_DAILY_SUMMARY_ENABLE),
	SCHEDULE_PROCESS_COMMUNICATION_SUMMARY_CRON(
			AppPropertyConstants.AppPropertyName.SCHEDULE_PROCESS_COMMUNICATION_SUMMARY_CRON),
	SCHEDULE_PROCESS_COMMUNICATION_SUMMARY_ENABLE(
			AppPropertyConstants.AppPropertyName.SCHEDULE_PROCESS_COMMUNICATION_SUMMARY_ENABLE),
	PUSH_DAILY_BILLING(AppPropertyConstants.AppPropertyName.PUSH_DAILY_BILLING),
	PUSH_EXTERNAL_ENABLE(AppPropertyConstants.AppPropertyName.PUSH_EXTERNAL_ENABLE),;

	public String propertyKey;

	private AppPropertyDataSet(String propertyKey) {
		this.propertyKey = propertyKey;
	}

	public static final Map<Object, String> AppProperty = Stream.of(
			new SimpleEntry<>(AppPropertyDataSet.SERVER_CONTEXTPATH, "server.contextPath"),
			new SimpleEntry<>(AppPropertyDataSet.SERVER_PORT, "server.port"),
			new SimpleEntry<>(AppPropertyDataSet.CASSANDRA_KEYSPACE_NAME, "spring.data.cassandra.keyspace-name"),
			new SimpleEntry<>(AppPropertyDataSet.CASSANDRA_CONTACT_POINTS, "spring.data.cassandra.contact-points"),
			new SimpleEntry<>(AppPropertyDataSet.CASSANDRA_PORT, "spring.data.cassandra.port"),
			new SimpleEntry<>(AppPropertyDataSet.CASSANDRA_USER, "spring.data.cassandra.user"),
			new SimpleEntry<>(AppPropertyDataSet.CASSANDRA_PASSWORD, "spring.data.cassandra.password"),
			new SimpleEntry<>(AppPropertyDataSet.CASSANDRA_PROTOCOL_VERSION, "spring.data.cassandra.protocol-version"),
			new SimpleEntry<>(AppPropertyDataSet.PRESTO_NAME, "spring.datasource.presto.name=presto"),
			new SimpleEntry<>(AppPropertyDataSet.PRESTO_DRIVER_CLASS_NAME,
					"spring.datasource.presto.driver-class-name"),
			new SimpleEntry<>(AppPropertyDataSet.PRESTO_URL, "spring.datasource.presto.url"),
			new SimpleEntry<>(AppPropertyDataSet.PRESTO_USERNAME, "spring.datasource.presto.username"),
			new SimpleEntry<>(AppPropertyDataSet.PRESTO_TEST_WHILE_IDLE, "spring.datasource.presto.testWhileIdle"),
			new SimpleEntry<>(AppPropertyDataSet.PRESTO_VALIDATION_QUERY, "spring.datasource.presto.validationQuery"),
			new SimpleEntry<>(AppPropertyDataSet.METER_COMM_COUNT_CRON, "schedule.process.metercommcount.cron"),
			new SimpleEntry<>(AppPropertyDataSet.METER_RETRY, "command.meter.retry"),
			new SimpleEntry<>(AppPropertyDataSet.FIRMWARE_UPGRADE_RETRY, "command.firmware.upgrade.retry"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_RETRY, "command.meter.configRetry"),
			new SimpleEntry<>(AppPropertyDataSet.LAST_LP_READ, "command.meter.lastLPRead"),
			new SimpleEntry<>(AppPropertyDataSet.DLMS_APP_ADDRESS, "meter.dlms.app.address"),
			new SimpleEntry<>(AppPropertyDataSet.FULLDATA_READ, "meter.fullData.read"),
			new SimpleEntry<>(AppPropertyDataSet.FULL_PREPAY_READ, "meter.fullPrepayData.read"),
			new SimpleEntry<>(AppPropertyDataSet.FIRMWARE_UPGRADE, "meter.firmware.upgrade"),
			new SimpleEntry<>(AppPropertyDataSet.FULLDATA_CONFIG_WRITE, "meter.fullData.config.write"),
			new SimpleEntry<>(AppPropertyDataSet.INSTANTANEOUS_READ, "meter.instantaneous.read"),
			new SimpleEntry<>(AppPropertyDataSet.DAILY_LP_READ, "meter.dailyLP.read"),
			new SimpleEntry<>(AppPropertyDataSet.DELTA_LP_READ, "meter.deltaLP.read"),
			new SimpleEntry<>(AppPropertyDataSet.BILLING_DATA_READ, "meter.billingData.read"),
			new SimpleEntry<>(AppPropertyDataSet.POWER_REALATED_EVENTS_READ, "meter.powerRelatedEvents.read"),
			new SimpleEntry<>(AppPropertyDataSet.VOLTAGE_REALATED_EVENTS_READ, "meter.voltageRelatedEvents.read"),
			new SimpleEntry<>(AppPropertyDataSet.TRANSACTION_RELATED_EVENTS_READ,
					"meter.transactionRelatedEvents.read"),
			new SimpleEntry<>(AppPropertyDataSet.CURRENT_RELATED_EVENTS_READ, "meter.currentRelatedEvents.read"),
			new SimpleEntry<>(AppPropertyDataSet.OTHER_RELATED_EVENTS_READ, "meter.otherRelatedEvents.read"),
			new SimpleEntry<>(AppPropertyDataSet.NON_ROLL_OVER_RELATED_EVENTS_READ, "meter.nonRolloverEvents.read"),
			new SimpleEntry<>(AppPropertyDataSet.CONTROL_RELATED_EVENTS_READ, "meter.controlRelatedEvents.read"),
			new SimpleEntry<>(AppPropertyDataSet.NAME_PLATE_READ, "meter.namePlate.read"),
			new SimpleEntry<>(AppPropertyDataSet.CONNECT_WRITE, "meter.connect.write"),
			new SimpleEntry<>(AppPropertyDataSet.DISCONNECT_WRITE, "meter.disconnect.write"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_ENABLE_PAYMENT_MODE, "meter.config.enablePaymentMode"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_ENABLE_METERING_MODE, "meter.config.enableMeteringMode"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_LAST_TOKEN_RECHARGE_AMOUNT,
					"meter.config.lastTokenRechargeAmount"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_LAST_TOKEN_RECHARGE_TIME, "meter.config.lastTokenRechargeTime"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_TOTAL_AMOUNT_AT_LAST_RECHARGE,
					"meter.config.totalAmountAtLastRecharge"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_CURRENT_BALANCE_AMOUNT, "meter.config.currentBalanceAmount"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_CURRENT_BALANCE_TIME, "meter.config.currentBalanceTime"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_LOAD_LIMIT_KW, "meter.config.loadLimitKw"),
			new SimpleEntry<>(AppPropertyDataSet.ENABLE_DISABLE_DIS_CONTROL, "meter.config.enableDisableDisControl"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_RTC_CLOCK, "meter.config.rtcClock"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_ACTIVITY_CALENDAR, "meter.config.activityCalendar"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_DEMAND_INTEGRATION_PERIOD,
					"meter.config.demandIntegrationPeriod"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_PROFILE_CAPTURE_PERIOD, "meter.config.profileCapturePeriod"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_COVER_OPEN, "meter.config.coverOpen"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_MD_RESET, "meter.config.mdReset"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_INSTANT_IP_PUSH, "meter.config.instantIPPush"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_ALERT_IP_PUSH, "meter.config.alertIPPush"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_ACTIVITY_SCHEDULE_PUSH, "meter.config.activitySchedulePush"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_BILLING_DATES, "meter.config.billingDates"),
			new SimpleEntry<>(AppPropertyDataSet.EVENT_TYPE_LIST, "meter.eventTypeList"),
			new SimpleEntry<>(AppPropertyDataSet.EVENT_TYPE_CATEGORY_LIST, "meter.eventTypeCategoryList"),
			new SimpleEntry<>(AppPropertyDataSet.DIV_FACTOR, "meter.divFactor"),
			new SimpleEntry<>(AppPropertyDataSet.APPLICATION_PROPERTY, "meter.applicationProperty"),
			new SimpleEntry<>(AppPropertyDataSet.PROCESS_BATCH_DEVICE_COMMAND_BACKDAYS,
					"processBatch.deviceCommand.backDays"),
			new SimpleEntry<>(AppPropertyDataSet.HAPPY_HOUR_START_TIME, "happyhour.start.time"),
			new SimpleEntry<>(AppPropertyDataSet.HAPPY_HOUR_END_TIME, "happyhour.end.time"),
			new SimpleEntry<>(AppPropertyDataSet.SCHEDULE_PROCESS_DEVICE_CONFIG_BATCH_LOG_CRON,
					"schedule.process.deviceConfigBatchLog.cron"),
			new SimpleEntry<>(AppPropertyDataSet.SCHEDULE_PROCESS_DEVICE_COMMAND_BATCH_LOG_CRON,
					"schedule.process.deviceCommandBatchLog.cron"),
			new SimpleEntry<>(AppPropertyDataSet.SCHEDULE_PROCESS_DEVICE_CONFIG_READ_BATCH_LOG_CRON,
					"schedule.process.deviceConfigReadBatchLog.cron"),
			new SimpleEntry<>(AppPropertyDataSet.APPLICATION_PROPERTY_UPDATE, "meter.applicationProperties.update"),
			new SimpleEntry<>(AppPropertyDataSet.APPLICATION_PROPERTY_READ_UPDATE,
					"meter.applicationProperties.read.update"),
			new SimpleEntry<>(AppPropertyDataSet.PUSH_EVENTS_LIST, "meter.pushEventsList"),
			new SimpleEntry<>(AppPropertyDataSet.SCHEDULE_PROCESS_NON_DLMS_GAS_METER_COMMAND_LOG_CRON,
					"schedule.process.nonDLMSGasMeterCommandLogs.cron"),
			new SimpleEntry<>(AppPropertyDataSet.SINGLE_CONNECTION_COMMAND, "meter.singleConnection.command"),
			new SimpleEntry<>(AppPropertyDataSet.SINGLE_CONNECTION_DEPENDENT_CONNECT_COMMAND,
					"singleConnection.dependent.connect.commands"),
			new SimpleEntry<>(AppPropertyDataSet.SINGLE_CONNECTION_DEPENDENT_DISCONNECT_COMMAND,
					"singleConnection.dependent.disconnect.commands"),
			new SimpleEntry<>(AppPropertyDataSet.SCHEDULE_PROCESS_BILLING_DATA_CRON,
					"schedule.process.billingData.cron"),
			new SimpleEntry<>(AppPropertyDataSet.PROCESS_BILLING_DATA_ENABLE, "meter.process.BillingData.enable"),
			new SimpleEntry<>(AppPropertyDataSet.PROCESS_SLA_BLOCKLOAD_BACKDAYS, "processSla.blockLoad.backDays"),
			new SimpleEntry<>(AppPropertyDataSet.PROCESS_SLA_BLOCKLOAD_RANGETIME, "processSla.blockLoad.RangeTime"),
			new SimpleEntry<>(AppPropertyDataSet.PROCESS_SLA_DAILYLOAD_RANGETIME, "processSla.dailyLoad.RangeTime"),
			new SimpleEntry<>(AppPropertyDataSet.SCHEDULE_PROCESS_DAILY_SUMMARY_CRON,
					"schedule.process.dailySummary.cron"),
			new SimpleEntry<>(AppPropertyDataSet.SCHEDULE_PROCESS_DAILY_SUMMARY_ENABLE,
					"schedule.process.dailySummary.enable"),
			new SimpleEntry<>(AppPropertyDataSet.SCHEDULE_PROCESS_COMMUNICATION_SUMMARY_CRON,
					"schedule.process.communicationSummary.cron"),
			new SimpleEntry<>(AppPropertyDataSet.SCHEDULE_PROCESS_COMMUNICATION_SUMMARY_ENABLE,
					"schedule.process.communicationSummary.enable"),
			new SimpleEntry<>(AppPropertyDataSet.PUSH_DAILY_BILLING, "meter.push.daily.billing"),
			new SimpleEntry<>(AppPropertyDataSet.PUSH_EXTERNAL_ENABLE, "meter.push.external.enable"))
			.collect(Collectors.toMap(SimpleEntry::getKey, SimpleEntry::getValue));

	public synchronized static boolean contains(String commandName) {

		try {
			for (AppPropertyDataSet c : AppPropertyDataSet.values()) {
				if (c.propertyKey.equals(commandName)) {
					return true;
				}
			}
		} catch (Exception e) {
		}
		return false;
	}

	public static final Map<Object, String> AppPropertyName = Stream.of(
			new SimpleEntry<>(AppPropertyDataSet.SERVER_CONTEXTPATH.propertyKey, "server.contextPath"),
			new SimpleEntry<>(AppPropertyDataSet.SERVER_PORT.propertyKey, "server.port"),
			new SimpleEntry<>(AppPropertyDataSet.CASSANDRA_KEYSPACE_NAME.propertyKey,
					"spring.data.cassandra.keyspace-name"),
			new SimpleEntry<>(AppPropertyDataSet.CASSANDRA_CONTACT_POINTS.propertyKey,
					"spring.data.cassandra.contact-points"),
			new SimpleEntry<>(AppPropertyDataSet.CASSANDRA_PORT.propertyKey, "spring.data.cassandra.port"),
			new SimpleEntry<>(AppPropertyDataSet.CASSANDRA_USER.propertyKey, "spring.data.cassandra.user"),
			new SimpleEntry<>(AppPropertyDataSet.CASSANDRA_PASSWORD.propertyKey, "spring.data.cassandra.password"),
			new SimpleEntry<>(AppPropertyDataSet.CASSANDRA_PROTOCOL_VERSION.propertyKey,
					"spring.data.cassandra.protocol-version"),
			new SimpleEntry<>(AppPropertyDataSet.PRESTO_NAME.propertyKey, "spring.datasource.presto.name=presto"),
			new SimpleEntry<>(AppPropertyDataSet.PRESTO_DRIVER_CLASS_NAME.propertyKey,
					"spring.datasource.presto.driver-class-name"),
			new SimpleEntry<>(AppPropertyDataSet.PRESTO_URL.propertyKey, "spring.datasource.presto.url"),
			new SimpleEntry<>(AppPropertyDataSet.PRESTO_USERNAME.propertyKey, "spring.datasource.presto.username"),
			new SimpleEntry<>(AppPropertyDataSet.PRESTO_TEST_WHILE_IDLE.propertyKey,
					"spring.datasource.presto.testWhileIdle"),
			new SimpleEntry<>(AppPropertyDataSet.PRESTO_VALIDATION_QUERY.propertyKey,
					"spring.datasource.presto.validationQuery"),
			new SimpleEntry<>(AppPropertyDataSet.METER_COMM_COUNT_CRON.propertyKey,
					"schedule.process.metercommcount.cron"),
			new SimpleEntry<>(AppPropertyDataSet.METER_RETRY.propertyKey, "command.meter.retry"),
			new SimpleEntry<>(AppPropertyDataSet.FIRMWARE_UPGRADE_RETRY.propertyKey, "command.firmware.upgrade.retry"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_RETRY.propertyKey, "command.meter.configRetry"),
			new SimpleEntry<>(AppPropertyDataSet.LAST_LP_READ.propertyKey, "command.meter.lastLPRead"),
			new SimpleEntry<>(AppPropertyDataSet.DLMS_APP_ADDRESS.propertyKey, "meter.dlms.app.address"),
			new SimpleEntry<>(AppPropertyDataSet.FULLDATA_READ.propertyKey, "meter.fullData.read"),
			new SimpleEntry<>(AppPropertyDataSet.FULL_PREPAY_READ.propertyKey, "meter.fullPrepayData.read"),
			new SimpleEntry<>(AppPropertyDataSet.FIRMWARE_UPGRADE.propertyKey, "meter.firmware.upgrade"),
			new SimpleEntry<>(AppPropertyDataSet.FULLDATA_CONFIG_WRITE.propertyKey, "meter.fullData.config.write"),
			new SimpleEntry<>(AppPropertyDataSet.INSTANTANEOUS_READ.propertyKey, "meter.instantaneous.read"),
			new SimpleEntry<>(AppPropertyDataSet.DAILY_LP_READ.propertyKey, "meter.dailyLP.read"),
			new SimpleEntry<>(AppPropertyDataSet.DELTA_LP_READ.propertyKey, "meter.deltaLP.read"),
			new SimpleEntry<>(AppPropertyDataSet.BILLING_DATA_READ.propertyKey, "meter.billingData.read"),
			new SimpleEntry<>(AppPropertyDataSet.POWER_REALATED_EVENTS_READ.propertyKey,
					"meter.powerRelatedEvents.read"),
			new SimpleEntry<>(AppPropertyDataSet.VOLTAGE_REALATED_EVENTS_READ.propertyKey,
					"meter.voltageRelatedEvents.read"),
			new SimpleEntry<>(AppPropertyDataSet.TRANSACTION_RELATED_EVENTS_READ.propertyKey,
					"meter.transactionRelatedEvents.read"),
			new SimpleEntry<>(AppPropertyDataSet.CURRENT_RELATED_EVENTS_READ.propertyKey,
					"meter.currentRelatedEvents.read"),
			new SimpleEntry<>(AppPropertyDataSet.OTHER_RELATED_EVENTS_READ.propertyKey,
					"meter.otherRelatedEvents.read"),
			new SimpleEntry<>(AppPropertyDataSet.NON_ROLL_OVER_RELATED_EVENTS_READ.propertyKey,
					"meter.nonRolloverEvents.read"),
			new SimpleEntry<>(AppPropertyDataSet.CONTROL_RELATED_EVENTS_READ.propertyKey,
					"meter.controlRelatedEvents.read"),
			new SimpleEntry<>(AppPropertyDataSet.NAME_PLATE_READ.propertyKey, "meter.namePlate.read"),
			new SimpleEntry<>(AppPropertyDataSet.CONNECT_WRITE.propertyKey, "meter.connect.write"),
			new SimpleEntry<>(AppPropertyDataSet.DISCONNECT_WRITE.propertyKey, "meter.disconnect.write"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_ENABLE_PAYMENT_MODE.propertyKey,
					"meter.config.enablePaymentMode"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_ENABLE_METERING_MODE.propertyKey,
					"meter.config.enableMeteringMode"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_LAST_TOKEN_RECHARGE_AMOUNT.propertyKey,
					"meter.config.lastTokenRechargeAmount"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_LAST_TOKEN_RECHARGE_TIME.propertyKey,
					"meter.config.lastTokenRechargeTime"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_TOTAL_AMOUNT_AT_LAST_RECHARGE.propertyKey,
					"meter.config.totalAmountAtLastRecharge"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_CURRENT_BALANCE_AMOUNT.propertyKey,
					"meter.config.currentBalanceAmount"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_CURRENT_BALANCE_TIME.propertyKey,
					"meter.config.currentBalanceTime"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_LOAD_LIMIT_KW.propertyKey, "meter.config.loadLimitKw"),
			new SimpleEntry<>(AppPropertyDataSet.ENABLE_DISABLE_DIS_CONTROL.propertyKey,
					"meter.config.enableDisableDisControl"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_RTC_CLOCK.propertyKey, "meter.config.rtcClock"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_ACTIVITY_CALENDAR.propertyKey, "meter.config.activityCalendar"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_DEMAND_INTEGRATION_PERIOD.propertyKey,
					"meter.config.demandIntegrationPeriod"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_PROFILE_CAPTURE_PERIOD.propertyKey,
					"meter.config.profileCapturePeriod"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_COVER_OPEN.propertyKey, "meter.config.coverOpen"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_MD_RESET.propertyKey, "meter.config.mdReset"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_INSTANT_IP_PUSH.propertyKey, "meter.config.instantIPPush"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_ALERT_IP_PUSH.propertyKey, "meter.config.alertIPPush"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_ACTIVITY_SCHEDULE_PUSH.propertyKey,
					"meter.config.activitySchedulePush"),
			new SimpleEntry<>(AppPropertyDataSet.CONFIG_BILLING_DATES.propertyKey, "meter.config.billingDates"),
			new SimpleEntry<>(AppPropertyDataSet.EVENT_TYPE_LIST.propertyKey, "meter.eventTypeList"),
			new SimpleEntry<>(AppPropertyDataSet.EVENT_TYPE_CATEGORY_LIST.propertyKey, "meter.eventTypeCategoryList"),
			new SimpleEntry<>(AppPropertyDataSet.DIV_FACTOR.propertyKey, "meter.divFactor"),
			new SimpleEntry<>(AppPropertyDataSet.APPLICATION_PROPERTY.propertyKey, "meter.applicationProperty"),
			new SimpleEntry<>(AppPropertyDataSet.PROCESS_BATCH_DEVICE_COMMAND_BACKDAYS,
					"processBatch.deviceCommand.backDays"),
			new SimpleEntry<>(AppPropertyDataSet.HAPPY_HOUR_START_TIME.propertyKey, "happyhour.start.time"),
			new SimpleEntry<>(AppPropertyDataSet.HAPPY_HOUR_END_TIME.propertyKey, "happyhour.end.time"),
			new SimpleEntry<>(AppPropertyDataSet.SCHEDULE_PROCESS_DEVICE_CONFIG_BATCH_LOG_CRON.propertyKey,
					"schedule.process.deviceConfigBatchLog.cron"),
			new SimpleEntry<>(AppPropertyDataSet.SCHEDULE_PROCESS_DEVICE_COMMAND_BATCH_LOG_CRON.propertyKey,
					"schedule.process.deviceCommandBatchLog.cron"),
			new SimpleEntry<>(AppPropertyDataSet.SCHEDULE_PROCESS_DEVICE_CONFIG_READ_BATCH_LOG_CRON.propertyKey,
					"schedule.process.deviceConfigReadBatchLog.cron"),
			new SimpleEntry<>(AppPropertyDataSet.APPLICATION_PROPERTY_UPDATE.propertyKey,
					"meter.applicationProperties.update"),
			new SimpleEntry<>(AppPropertyDataSet.APPLICATION_PROPERTY_READ_UPDATE.propertyKey,
					"meter.applicationProperties.read.update"),
			new SimpleEntry<>(AppPropertyDataSet.PUSH_EVENTS_LIST.propertyKey, "meter.pushEventsList"),
			new SimpleEntry<>(AppPropertyDataSet.SCHEDULE_PROCESS_NON_DLMS_GAS_METER_COMMAND_LOG_CRON.propertyKey,
					"schedule.process.nonDLMSGasMeterCommandLogs.cron"),
			new SimpleEntry<>(AppPropertyDataSet.SINGLE_CONNECTION_COMMAND.propertyKey,
					"meter.singleConnection.command"),
			new SimpleEntry<>(AppPropertyDataSet.SINGLE_CONNECTION_DEPENDENT_CONNECT_COMMAND.propertyKey,
					"singleConnection.dependent.connect.commands"),
			new SimpleEntry<>(AppPropertyDataSet.SINGLE_CONNECTION_DEPENDENT_DISCONNECT_COMMAND.propertyKey,
					"singleConnection.dependent.disconnect.commands"),
			new SimpleEntry<>(AppPropertyDataSet.SCHEDULE_PROCESS_BILLING_DATA_CRON.propertyKey,
					"schedule.process.billingData.cron"),
			new SimpleEntry<>(AppPropertyDataSet.PROCESS_BILLING_DATA_ENABLE.propertyKey,
					"meter.process.BillingData.enable"),
			new SimpleEntry<>(AppPropertyDataSet.PROCESS_SLA_BLOCKLOAD_BACKDAYS.propertyKey,
					"processSla.blockLoad.backDays"),
			new SimpleEntry<>(AppPropertyDataSet.PROCESS_SLA_BLOCKLOAD_RANGETIME.propertyKey,
					"processSla.blockLoad.RangeTime"),
			new SimpleEntry<>(AppPropertyDataSet.PROCESS_SLA_DAILYLOAD_RANGETIME.propertyKey,
					"processSla.dailyLoad.RangeTime"),
			new SimpleEntry<>(AppPropertyDataSet.SCHEDULE_PROCESS_DAILY_SUMMARY_CRON.propertyKey,
					"schedule.process.dailySummary.cron"),
			new SimpleEntry<>(AppPropertyDataSet.SCHEDULE_PROCESS_DAILY_SUMMARY_ENABLE.propertyKey,
					"schedule.process.dailySummary.enable"),
			new SimpleEntry<>(AppPropertyDataSet.SCHEDULE_PROCESS_COMMUNICATION_SUMMARY_CRON.propertyKey,
					"schedule.process.communicationSummary.cron"),
			new SimpleEntry<>(AppPropertyDataSet.SCHEDULE_PROCESS_COMMUNICATION_SUMMARY_ENABLE.propertyKey,
					"schedule.process.communicationSummary.enable"),
			new SimpleEntry<>(AppPropertyDataSet.PUSH_DAILY_BILLING.propertyKey, "meter.push.daily.billing"),
			new SimpleEntry<>(AppPropertyDataSet.PUSH_EXTERNAL_ENABLE.propertyKey, "meter.push.external.enable"))

			.collect(Collectors.toMap(SimpleEntry::getKey, SimpleEntry::getValue));

	public static String getPropertyKeyByUiName(String fieldName) throws IllegalArgumentException {

		if (AppPropertyName.containsKey(fieldName)) {

			return AppPropertyName.get(fieldName);

		} else {

			throw new IllegalArgumentException("Invalid Property Name: " + fieldName);

		}

	}

}
